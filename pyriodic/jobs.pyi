from datetime import datetime
from threading import Thread
from typing import Union
from typing import List
from typing import Tuple
from typing import Callable
from pyriodic import Scheduler

WhenType = Union[str, datetime]

# noinspection PyMethodMayBeStatic
class Job:
	def __init__(self, func: Callable, when: WhenType, name: str=None, repeating: bool=True, threaded: bool=True,
			ignore_exceptions: bool=False, retrys: int=0, retry_time: int=0, alt_func: Callable=None) -> None:
		self.run_time_history = [] # type: List[datetime]
		self.status = 'waiting' # type: str
		self.thread = None # type: Thread
		self.parent = None # type: Scheduler
		self.exceptions = [] # type: List[Tuple[BaseException, datetime]]

	def first_run_time(self) -> datetime: ...
	def last_run_time(self) -> datetime: ...
	def _add_run_time(self, dt: datetime) ->None: ...
	def run_count(self) -> int: ...
	def start(self) -> None: ...
	def is_waiting(self) -> bool: ...
	def wait(self) -> None: ...
	def pause(self) -> None: ...
	def is_paused(self) -> bool: ...
	def run(self, retrys: int=0, alt: bool=False) -> None: ...
	def is_running(self) -> bool: ...
	@staticmethod
	def is_in_future(when: datetime) -> bool: ...
	def __repr__(self) ->str: ...


# noinspection PyMethodMayBeStatic
class DurationJob:
	def __init__(self, func: Callable, when: str, *argums: tuple, start_time: WhenType=None, name: str=None,
			repeating: bool=True, threaded: bool=True, ignore_exceptions: bool=False, retrys: int=0,
			retry_time: int=0, alt_func: Callable=None, **keyargs: dict) -> None: ...
	def next_run_time(self) -> datetime: ...


# noinspection PyMethodMayBeStatic
class DatetimeJob:
	def __init__(self, func: Callable, when: WhenType, *argums: tuple, interval: str=None, name: str=None,
			repeating: bool=True, threaded: bool=True, ignore_exceptions: bool=False, retrys: int=0,
			retry_time: int=0, alt_func: Callable=None, custom_format: str=None, **keyargs: dict) -> None:	...
	def next_run_time(self) -> datetime: ...
	def increment(self, when: datetime) -> datetime: ...


# noinspection PyMethodMayBeStatic
class DatetimesJob:
	def __init__(self, func: Callable, when: str, interval: str, *argums: tuple, name: str=None,
			repeating: bool=True, threaded: bool=True, ignore_exceptions: bool=False, retrys: int=0,
			retry_time: int=0, alt_func: Callable=None, custom_format: str=None, **keyargs: dict) -> None:	...
	def next_run_time(self) -> datetime: ...
